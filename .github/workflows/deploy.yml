name: Deploy branches to channels

on:
  push:
    branches: '*'

env:
  node_version: 12
  project-directory: ./

jobs:
  prepare:
    name: Checking and preparing settings for jobs
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.branch-names.outputs.current_branch }}
      channel: ${{ steps.get-channel.outputs.channel }}
      DIGITALOCEAN_TOKEN: ${{ steps.resolver.outputs.DIGITALOCEAN_TOKEN }}
      CLUSTER_NAME: ${{ steps.resolver.outputs.CLUSTER_NAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get branch names
        id: branch-names
        uses: tj-actions/branch-names@v8

      - name: Get npm version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@master

      - name: Get channel information
        id: get-channel
        run: |
          branch_name=${{ steps.branch-names.outputs.current_branch }}
      
          content=$(cat .releaserc)
      
          channel=$(echo "$content" | jq -r --arg branch "$branch_name" '.branches[] | select(.name | test("^" + $branch + "$")) | .channel')
      
          echo "::set-output name=channel::$channel"
        shell: bash
      

      - name: Get deploy token
        id: resolver
        run: |
          case ${{ steps.get-channel.outputs.channel }} in
            "rc")
              echo "::set-output name=DIGITALOCEAN_TOKEN::${{ secrets.DIGITALOCEAN_PRODUCTION_TOKEN }}"
              echo "::set-output name=CLUSTER_NAME::${{ secrets.PRODUCTION_CLUSTER_NAME }}"
              ;;
            "alpha")
              echo "::set-output name=DIGITALOCEAN_TOKEN::${{ secrets.TEST_DIGITALOCEAN_TOKEN }}"
              echo "::set-output name=CLUSTER_NAME::${{ secrets.TEST_CLUSTER_NAME }}"
              ;;
            *)
              echo "No token found for channel ${{ steps.get-channel.outputs.channel }}"
              exit 1
              ;;
          esac
        shell: bash

  deploy:
    name: Deploy to channel
    runs-on: ubuntu-latest
    steps:
      - name: output
        run: |
          echo "Branch: ${{ needs.prepare.outputs.branch }}"
          echo "Channel: ${{ needs.prepare.outputs.channel }}"
          echo "DIGITALOCEAN_TOKEN: ${{ needs.prepare.outputs.DIGITALOCEAN_TOKEN }}"
          echo "CLUSTER_NAME: ${{ needs.prepare.outputs.CLUSTER_NAME }}"

      # - name: Run kustomize
      #   run: (cd ./deployment/base && ../../kustomize edit set image greenstand/treetracker-query-api:${{ steps.package-version.outputs.current-version }} )
      #   working-directory: ${{ env.project-directory }}

      # - name: Install doctl for kubernetes
      #   uses: digitalocean/action-doctl@v2
      #   with:
      #     token: ${{ prepare.outputs.DIGITALOCEAN_TOKEN }}

      # - name: Save DigitalOcean kubeconfig
      #   run: doctl kubernetes cluster kubeconfig save ${{ prepare.outputs.CLUSTER_NAME }}

      # - name: Update kubernetes resources
      #   run: kustomize build deployment/overlays/prod | kubectl apply -n webmap --wait -f -
      #   working-directory: ${{ env.project-directory }}
